// Mocks generated by Mockito 5.4.6 from annotations
// in sensorvisualization/test/SensorMeasurementController_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:sensorvisualization/data/services/client/ClientCommandHandler.dart'
    as _i3;
import 'package:sensorvisualization/data/services/client/SensorClient.dart'
    as _i4;
import 'package:sensorvisualization/data/settingsModels/NetworkCommands.dart'
    as _i7;
import 'package:web_socket_channel/web_socket_channel.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWebSocketChannel_0 extends _i1.SmartFake
    implements _i2.WebSocketChannel {
  _FakeWebSocketChannel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeClientCommandHandler_1 extends _i1.SmartFake
    implements _i3.ClientCommandHandler {
  _FakeClientCommandHandler_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SensorClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockSensorClient extends _i1.Mock implements _i4.SensorClient {
  MockSensorClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WebSocketChannel get channel =>
      (super.noSuchMethod(
            Invocation.getter(#channel),
            returnValue: _FakeWebSocketChannel_0(
              this,
              Invocation.getter(#channel),
            ),
          )
          as _i2.WebSocketChannel);

  @override
  _i3.ClientCommandHandler get commandHandler =>
      (super.noSuchMethod(
            Invocation.getter(#commandHandler),
            returnValue: _FakeClientCommandHandler_1(
              this,
              Invocation.getter(#commandHandler),
            ),
          )
          as _i3.ClientCommandHandler);

  @override
  String get hostIPAddress =>
      (super.noSuchMethod(
            Invocation.getter(#hostIPAddress),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#hostIPAddress),
            ),
          )
          as String);

  @override
  String get deviceName =>
      (super.noSuchMethod(
            Invocation.getter(#deviceName),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#deviceName),
            ),
          )
          as String);

  @override
  String get localIP =>
      (super.noSuchMethod(
            Invocation.getter(#localIP),
            returnValue: _i5.dummyValue<String>(
              this,
              Invocation.getter(#localIP),
            ),
          )
          as String);

  @override
  bool get isPaused =>
      (super.noSuchMethod(Invocation.getter(#isPaused), returnValue: false)
          as bool);

  @override
  int get sensorInterval =>
      (super.noSuchMethod(Invocation.getter(#sensorInterval), returnValue: 0)
          as int);

  @override
  set channel(_i2.WebSocketChannel? _channel) => super.noSuchMethod(
    Invocation.setter(#channel, _channel),
    returnValueForMissingStub: null,
  );

  @override
  set commandHandler(_i3.ClientCommandHandler? _commandHandler) =>
      super.noSuchMethod(
        Invocation.setter(#commandHandler, _commandHandler),
        returnValueForMissingStub: null,
      );

  @override
  set localIP(String? _localIP) => super.noSuchMethod(
    Invocation.setter(#localIP, _localIP),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<bool> initSocket() =>
      (super.noSuchMethod(
            Invocation.method(#initSocket, []),
            returnValue: _i6.Future<bool>.value(false),
          )
          as _i6.Future<bool>);

  @override
  void sendJson(Map<String, dynamic>? json) => super.noSuchMethod(
    Invocation.method(#sendJson, [json]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> startSensorStream() =>
      (super.noSuchMethod(
            Invocation.method(#startSensorStream, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> pauseMeasurement() =>
      (super.noSuchMethod(
            Invocation.method(#pauseMeasurement, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> resumeMeasurement() =>
      (super.noSuchMethod(
            Invocation.method(#resumeMeasurement, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> stopMeasurement() =>
      (super.noSuchMethod(
            Invocation.method(#stopMeasurement, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void sendStartingNullMeasurement(int? durationInSeconds) =>
      super.noSuchMethod(
        Invocation.method(#sendStartingNullMeasurement, [durationInSeconds]),
        returnValueForMissingStub: null,
      );

  @override
  void sendDelayedMeasurement(int? duration) => super.noSuchMethod(
    Invocation.method(#sendDelayedMeasurement, [duration]),
    returnValueForMissingStub: null,
  );

  @override
  void sendNullMeasurementAverage(Map<String, Object>? averageValues) =>
      super.noSuchMethod(
        Invocation.method(#sendNullMeasurementAverage, [averageValues]),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> disconnect() =>
      (super.noSuchMethod(
            Invocation.method(#disconnect, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [ClientCommandHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockClientCommandHandler extends _i1.Mock
    implements _i3.ClientCommandHandler {
  MockClientCommandHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onAlarmReceived(dynamic Function(String)? _onAlarmReceived) =>
      super.noSuchMethod(
        Invocation.setter(#onAlarmReceived, _onAlarmReceived),
        returnValueForMissingStub: null,
      );

  @override
  set onAlarmStopReceived(dynamic Function()? _onAlarmStopReceived) =>
      super.noSuchMethod(
        Invocation.setter(#onAlarmStopReceived, _onAlarmStopReceived),
        returnValueForMissingStub: null,
      );

  @override
  set onStartNullMeasurementReceived(
    dynamic Function(int)? _onStartNullMeasurementReceived,
  ) => super.noSuchMethod(
    Invocation.setter(
      #onStartNullMeasurementReceived,
      _onStartNullMeasurementReceived,
    ),
    returnValueForMissingStub: null,
  );

  @override
  set onDelayedMeasurementReceived(
    dynamic Function(int)? _onDelayedMeasurementReceived,
  ) => super.noSuchMethod(
    Invocation.setter(
      #onDelayedMeasurementReceived,
      _onDelayedMeasurementReceived,
    ),
    returnValueForMissingStub: null,
  );

  @override
  set onMeasurementPaused(dynamic Function()? _onMeasurementPaused) =>
      super.noSuchMethod(
        Invocation.setter(#onMeasurementPaused, _onMeasurementPaused),
        returnValueForMissingStub: null,
      );

  @override
  set onMeasurementResumed(dynamic Function()? _onMeasurementResumed) =>
      super.noSuchMethod(
        Invocation.setter(#onMeasurementResumed, _onMeasurementResumed),
        returnValueForMissingStub: null,
      );

  @override
  set onMeasurementStopped(dynamic Function()? _onMeasurementStopped) =>
      super.noSuchMethod(
        Invocation.setter(#onMeasurementStopped, _onMeasurementStopped),
        returnValueForMissingStub: null,
      );

  @override
  void handleCommand(
    _i7.NetworkCommands? command,
    Map<String, dynamic>? data,
  ) => super.noSuchMethod(
    Invocation.method(#handleCommand, [command, data]),
    returnValueForMissingStub: null,
  );
}
